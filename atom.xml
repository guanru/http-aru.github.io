<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Colacoin&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xqxqxq.top/"/>
  <updated>2018-12-22T08:06:47.354Z</updated>
  <id>https://xqxqxq.top/</id>
  
  <author>
    <name>Colacoin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>new和[alloc init]的区别</title>
    <link href="https://xqxqxq.top/2018/12/19/new%E5%92%8C-alloc-init-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://xqxqxq.top/2018/12/19/new和-alloc-init-的区别/</id>
    <published>2018-12-19T14:44:46.000Z</published>
    <updated>2018-12-22T08:06:47.354Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>new和[alloc init]在功能上几乎是一致的,那么他们到底有什么区别呢。</p><a id="more"></a><p>在实际开发过程中，我们看到的基本都是<strong>[[className alloc] init]</strong>,能够看到使用<strong>new</strong>的场合很少，这是为什么呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+ new &#123; //new方法</span><br><span class="line">id newObject = (*_alloc)((Class)self, 0); </span><br><span class="line">Class metaClass = self-&gt;isa; </span><br><span class="line">if (class_getVersion(metaClass) &gt; 1) </span><br><span class="line">return [newObject init]; </span><br><span class="line">else </span><br><span class="line">return newObject; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">//alloc、init方法</span><br><span class="line">+ alloc &#123; </span><br><span class="line">return (*_zoneAlloc)((Class)self, 0, malloc_default_zone());  </span><br><span class="line">&#125; </span><br><span class="line">- init &#123; </span><br><span class="line">return self; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对比代码发现，只是alloc分配内存时使用了zone,查询了解到，这个做法是为了在给对象分配内存的时候，将关联的对象分配到一个相邻的内存区域内，以便于调用时消耗尽量小的代价，提升程序处理速度。<br>看到这里还是有点蒙，继续查阅资料终于找到答案，如果使用new方法，那么初始化方法是在new方法内部默认调用init方法的，限制性太高，无法使用initName自定义初始化方法，很不方便，早期开发者们发现“显示调用总比隐式调用要好”，由此就将其分开写成两个方法[alloc init];</p><blockquote><p>new 和 [alloc init]功能基本一致，区别只在于new只能使用默认初始化方法，而alloc的方式可以调用自定义的初始化方法;</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;new和[alloc init]在功能上几乎是一致的,那么他们到底有什么区别呢。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://xqxqxq.top/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://xqxqxq.top/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>测试文章</title>
    <link href="https://xqxqxq.top/2018/12/02/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <id>https://xqxqxq.top/2018/12/02/测试文章/</id>
    <published>2018-12-02T15:43:48.000Z</published>
    <updated>2018-12-14T03:32:05.091Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="这是第三篇测试"><a href="#这是第三篇测试" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2><h2 id="这是第三篇测试-1"><a href="#这是第三篇测试-1" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2><h2 id="这是第三篇测试-2"><a href="#这是第三篇测试-2" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2><a id="more"></a><h2 id="这是第三篇测试-3"><a href="#这是第三篇测试-3" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2><h2 id="这是第三篇测试-4"><a href="#这是第三篇测试-4" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2><h2 id="这是第三篇测试-5"><a href="#这是第三篇测试-5" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2><h2 id="这是第三篇测试-6"><a href="#这是第三篇测试-6" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2><h2 id="这是第三篇测试-7"><a href="#这是第三篇测试-7" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2><h2 id="这是第三篇测试-8"><a href="#这是第三篇测试-8" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2><h2 id="这是第三篇测试-9"><a href="#这是第三篇测试-9" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2><h2 id="这是第三篇测试-10"><a href="#这是第三篇测试-10" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2><h2 id="这是第三篇测试-11"><a href="#这是第三篇测试-11" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2><h2 id="这是第三篇测试-12"><a href="#这是第三篇测试-12" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2><h2 id="这是第三篇测试-13"><a href="#这是第三篇测试-13" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2><h2 id="这是第三篇测试-14"><a href="#这是第三篇测试-14" class="headerlink" title="这是第三篇测试"></a>这是第三篇测试</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;这是第三篇测试&quot;&gt;&lt;a href=&quot;#这是第三篇测试&quot; class=&quot;headerlink&quot; title=&quot;这是第三篇测试&quot;&gt;&lt;/a&gt;这是第三篇测试&lt;/h2&gt;&lt;h2 id=&quot;这是第三篇测试-1&quot;&gt;&lt;a href=&quot;#这是第三篇测试-1&quot; class=&quot;headerlink&quot; title=&quot;这是第三篇测试&quot;&gt;&lt;/a&gt;这是第三篇测试&lt;/h2&gt;&lt;h2 id=&quot;这是第三篇测试-2&quot;&gt;&lt;a href=&quot;#这是第三篇测试-2&quot; class=&quot;headerlink&quot; title=&quot;这是第三篇测试&quot;&gt;&lt;/a&gt;这是第三篇测试&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>self.和_的区别</title>
    <link href="https://xqxqxq.top/2018/12/02/self-%E5%92%8C-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://xqxqxq.top/2018/12/02/self-和-的区别/</id>
    <published>2018-12-02T15:30:34.000Z</published>
    <updated>2018-12-10T14:06:38.649Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近关注到一个问题：iOS开发中，关于“self.”和“_”的用法有什么不同</p><a id="more"></a><blockquote><p>“self.”是对类<strong>属性</strong>的访问，”_”是<strong>直接访问</strong>实例变量！</p></blockquote><p>这句话是什么意思呢，首先贴一下在OC当中<strong>属性</strong>的概念，<em>从objective-c2.0起, 为<strong>实例变量</strong>提供了<strong>setter</strong>和<strong>getter</strong>方法的默认实现。</em>    </p><p>那么，这两种用法的本质区别就很清楚了：</p><blockquote><blockquote><p>“self.”通过<strong>setter</strong>、<strong>getter</strong>方法对示例变量进行访问！</p></blockquote></blockquote><blockquote><blockquote><p>“_”是对实例变量<strong>直接</strong>进行访问！</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property(nonatomic, copy)NSString *str;//声明一个属性</span><br></pre></td></tr></table></figure><p>我们在声明一个属性之后，编译器默默地做了些什么呢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">NSString *_str;//声明一个实例变量</span><br><span class="line"></span><br><span class="line">- (NSString *)str &#123;//创建getter方法</span><br><span class="line">    return _str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setStr:(NSString *)str &#123;//创建setter方法</span><br><span class="line">    if (str != _str) &#123;</span><br><span class="line">        _str = [str copy];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，编译器为我们生成了对实例变量进行操作的<strong>setter</strong>、<strong>getter</strong>方法，也就是说来自类外部的访问，可以通过<strong>setter</strong>和<strong>getter</strong>方法( <em>点语法</em> ); 而类内部(.m文件)，通过”_”即可访问实例变量(_str)，不会调用<strong>setter</strong>和<strong>getter</strong>方法。</p><blockquote><p>重写set/get方法 | 懒加载</p></blockquote><p>有时<strong>setter</strong>、<strong>getter</strong>方法中可能存在其他额外的操作(懒加载)，这时候就需要进行重写，例如实现一个NSMutableArray的懒加载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@property(nonatomic, strong)NSMutableArray *mutableArray;</span><br><span class="line"></span><br><span class="line">- (NSMutableArray *)mutableArray &#123;//重写getter</span><br><span class="line">    if (!_mutableArray) &#123;//在通过属性访问mutableArray时进行初始化，且只初始化一次(lazyload)</span><br><span class="line">        _mutableArray = [NSMutableArray array];</span><br><span class="line">        //不能使用self.mutableArray</span><br><span class="line">    &#125;</span><br><span class="line">    return _mutableArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在实现上述方法时，需要使用_mutableArray进行访问，不能使用self.mutableArray访问，使用”self.”需要调用setter方法，会造成<strong>死循环</strong>，程序crash！</p></blockquote><blockquote><p><strong>开发中的建议</strong>：</p><ul><li>在内部读取值时，直接访问实例变量(_mutableArray)，设置赋值时，使用点语法进行操作(self.mutableArray)</li><li>初始化(init)及dealloc方法中，应直接访问实例变量(_mutableArray)</li></ul></blockquote><p>良好的编程习惯，是健壮代码、高质量项目的基石，我们一起努力吧 ~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近关注到一个问题：iOS开发中，关于“self.”和“_”的用法有什么不同&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://xqxqxq.top/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://xqxqxq.top/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Welcome</title>
    <link href="https://xqxqxq.top/2018/11/13/Welcome/"/>
    <id>https://xqxqxq.top/2018/11/13/Welcome/</id>
    <published>2018-11-13T07:42:06.000Z</published>
    <updated>2018-12-10T14:17:19.726Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Hello~ 欢迎来到我的博客<br><a id="more"></a><br><strong>新工作转正之际，颇有感慨，试用期充实至今，收获丰硕。于是想到要寻找一个平台，可以让我码几个字，总结日常收获，记录一下偶尔大脑神来之灵光，可是找来找去，试了几个都没有找到一个我特别欢喜的平台，可能是我有些挑剔（其实就是事儿多，哈哈），最终决定，自己动手搭建了这个<a href="xqxqxq.top">页面</a>，添加了自己的域名，以后将于此处，开始码字历程。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">各位客官，能来此一览，已是缘分，希望能有只言片语对您有用~</span><br></pre></td></tr></table></figure></p><p>本博客摸索修改全新主题<a href="https://github.com/SumiMakito/hexo-theme-journal/" target="_blank" rel="noopener">Journal</a>而来，感谢博主<a href="https://mak1t0.cc/" target="_blank" rel="noopener">Makito</a>！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello~ 欢迎来到我的博客&lt;br&gt;
    
    </summary>
    
    
      <category term="Welcome" scheme="https://xqxqxq.top/tags/Welcome/"/>
    
  </entry>
  
</feed>
